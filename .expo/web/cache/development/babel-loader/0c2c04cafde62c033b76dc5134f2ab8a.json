{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { BancoSql } from \"../core/db\";\nvar state = {\n  products: []\n};\nexport function save(params) {\n  var pord, add;\n  return _regeneratorRuntime.async(function save$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          state.products == null ? pord = [state.products] : pord = _toConsumableArray(state.products);\n          validation(params, state.products);\n          add = {\n            id: params.id,\n            name: params.name,\n            price: params.price,\n            image: params.image,\n            stock: 1\n          };\n          pord.splice(0, 0, add);\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"car\", JSON.stringify(pord)));\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function load() {\n  var result;\n  return _regeneratorRuntime.async(function load$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"car\"));\n\n        case 2:\n          result = _context2.sent;\n          state.products = JSON.parse(result);\n          console.log(state.products);\n\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction validation(params, prod) {\n  var result, valor;\n  return _regeneratorRuntime.async(function validation$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"car\"));\n\n        case 2:\n          result = _context3.sent;\n          valor = JSON.parse(result);\n          console.log(params);\n          console.log(valor);\n          valor.forEach(function (item, index) {\n            console.log(item);\n            console.log(index);\n          });\n\n        case 7:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport function list() {\n  var db = BancoSql();\n  db.transaction(function (tx) {\n    tx.executeSql(\"select * from car;\");\n  });\n}\nexport function update(params) {\n  var db = BancoSql();\n  db.transaction(function (tx) {\n    tx.executeSql(\"update car set name = ?, \" + \" name = ?, name = ?, name = ?,name = ?,\" + \" where id = ?;\", [params.id, params.name.toString(), params.image.toString(), params.price, params.stock, params.createdAt.toString()]);\n  });\n}\nexport function add(params) {\n  var db = BancoSql();\n\n  if (params.id === null) {\n    return false;\n  }\n\n  db.transaction(function (tx) {\n    tx.executeSql(\"insert into car (id, name,image, price,stock,createdAt) values (?,?,?,?,?,?)\", [params.id, params.name.toString(), params.image.toString(), params.price, params.stock, params.createdAt.toString()]);\n    tx.executeSql(\"select * from car\", [], function (_, _ref) {\n      var rows = _ref.rows;\n      return console.log(JSON.stringify(rows));\n    });\n  });\n}","map":{"version":3,"sources":["/home/jc/projetos/cursos/node/reactnative/loja/src/service/index.tsx"],"names":["AsyncStorage","BancoSql","state","products","save","params","pord","validation","add","id","name","price","image","stock","splice","setItem","JSON","stringify","load","getItem","result","parse","console","log","prod","valor","forEach","item","index","list","db","transaction","tx","executeSql","update","toString","createdAt","_","rows"],"mappings":"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","sourcesContent":["import AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { Product } from \"../interfaces/product\";\nimport { BancoSql } from \"../core/db\";\nconst state: any = {\n  products: [],\n};\n\nexport async function save(params: Product) {\n  let pord: any;\n  state.products == null\n    ? (pord = [state.products])\n    : (pord = [...state.products]);\n\n  validation(params, state.products);\n  const add = {\n    id: params.id,\n    name: params.name,\n    price: params.price,\n    image: params.image,\n    stock: 1,\n  };\n  pord.splice(0, 0, add);\n  await AsyncStorage.setItem(\"car\", JSON.stringify(pord));\n}\n\nexport async function load() {\n  const result: any = await AsyncStorage.getItem(\"car\");\n  state.products = JSON.parse(result);\n  console.log(state.products);\n}\n\nasync function validation(params: any, prod: any) {\n  const result: any = await AsyncStorage.getItem(\"car\");\n  const valor = JSON.parse(result);\n  console.log(params);\n  console.log(valor);\n  valor.forEach((item: any, index: number) => {\n    //if (params.id === item.id) {\n    console.log(item);\n    console.log(index);\n\n    //alert(\"Produto jÃ¡ existe\");\n    // }\n  });\n}\n\nexport function list() {\n  const db = BancoSql();\n  db.transaction((tx) => {\n    tx.executeSql(`select * from car;`);\n  });\n}\nexport function update(params: Product) {\n  const db = BancoSql();\n  db.transaction((tx) => {\n    tx.executeSql(\"update car set name = ?, \" +\n    \" name = ?, name = ?, name = ?,name = ?,\"+ \" where id = ?;\", [\n        params.id,\n        params.name.toString(),\n        params.image.toString(),\n        params.price,\n        params.stock,\n        params.createdAt.toString(),\n      ]);\n  });\n}\n\nexport function add(params: Product) {\n  const db = BancoSql();\n  if (params.id === null) {\n    return false;\n  }\n  db.transaction((tx) => {\n    tx.executeSql(\n      \"insert into car (id, name,image, price,stock,createdAt) values (?,?,?,?,?,?)\",\n      [\n        params.id,\n        params.name.toString(),\n        params.image.toString(),\n        params.price,\n        params.stock,\n        params.createdAt.toString(),\n      ]\n    );\n    tx.executeSql(\"select * from car\", [], (_, { rows }) =>\n      console.log(JSON.stringify(rows))\n    );\n  });\n}\n"]},"metadata":{},"sourceType":"module"}