{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { BancoSql } from \"../core/db\";\nvar state = {\n  products: []\n};\nvar db = BancoSql();\n\nfunction validation(params) {\n  var result;\n  return _regeneratorRuntime.async(function validation$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          result = list();\n          console.log(params);\n          result.then(function (result) {\n            result.forEach(function (e) {\n              return console.log(e);\n            }), console.log(params.id);\n          });\n          list();\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport function list() {\n  return _regeneratorRuntime.async(function list$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(db.transaction(function (tx) {\n            tx.executeSql(\"select * from car\", [], function (_, _ref) {\n              var rows = _ref.rows;\n              return state.products = rows;\n            });\n          }));\n\n        case 2:\n          return _context2.abrupt(\"return\", state.products);\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function update(params) {\n  return _regeneratorRuntime.async(function update$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(db.transaction(function (tx) {\n            tx.executeSql(\"update car set name = ?, \" + \" name = ?, image = ?, price = ?,stock = ?,createdAt = ?\" + \" where id = ?;\", [params.name.toString(), params.image.toString(), params.price, params.stock, params.createdAt.toString(), params.id]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function add(params) {\n  var add;\n  return _regeneratorRuntime.async(function add$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          validation(params);\n          add = {\n            id: params.id,\n            name: params.name,\n            price: params.price,\n            image: params.image,\n            stock: 1\n          };\n\n          if (!(params.id === null)) {\n            _context4.next = 4;\n            break;\n          }\n\n          return _context4.abrupt(\"return\", false);\n\n        case 4:\n          db.transaction(function (tx) {\n            tx.executeSql(\"insert into car (id, name,image, price,stock,createdAt) values (?,?,?,?,?,?)\", [params.id, params.name.toString(), params.image.toString(), params.price, params.stock, params.createdAt.toString()]);\n          });\n\n        case 5:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["/home/jc/projetos/cursos/node/reactnative/loja/src/service/index.tsx"],"names":["BancoSql","state","products","db","validation","params","result","list","console","log","then","forEach","e","id","transaction","tx","executeSql","_","rows","update","name","toString","image","price","stock","createdAt","add"],"mappings":";AAEA,SAASA,QAAT;AAEA,IAAMC,KAAU,GAAG;AACjBC,EAAAA,QAAQ,EAAE;AADO,CAAnB;AAGA,IAAMC,EAAE,GAAGH,QAAQ,EAAnB;;AAEA,SAAeI,UAAf,CAA0BC,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,UAAAA,MADR,GACiBC,IAAI,EADrB;AAEEC,UAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AACAC,UAAAA,MAAM,CAACI,IAAP,CAAY,UAACJ,MAAD,EAAuB;AAEjCA,YAAAA,MAAM,CAACK,OAAP,CAAe,UAACC,CAAD;AAAA,qBAAOJ,OAAO,CAACC,GAAR,CAAYG,CAAZ,CAAP;AAAA,aAAf,GAAuCJ,OAAO,CAACC,GAAR,CAAYJ,MAAM,CAACQ,EAAnB,CAAvC;AACD,WAHD;AAKAN,UAAAA,IAAI;;AARN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWA,OAAO,SAAeA,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACCJ,EAAE,CAACW,WAAH,CAAe,UAACC,EAAD,EAAQ;AAC3BA,YAAAA,EAAE,CAACC,UAAH,CACE,mBADF,EAEE,EAFF,EAGE,UAACC,CAAD;AAAA,kBAAMC,IAAN,QAAMA,IAAN;AAAA,qBAAkBjB,KAAK,CAACC,QAAN,GAAiBgB,IAAnC;AAAA,aAHF;AAKD,WANK,CADD;;AAAA;AAAA,4CAQEjB,KAAK,CAACC,QARR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUP,OAAO,SAAeiB,MAAf,CAAsBd,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACCF,EAAE,CAACW,WAAH,CAAe,UAACC,EAAD,EAAQ;AAC3BA,YAAAA,EAAE,CAACC,UAAH,CACE,8BACE,yDADF,GAEE,gBAHJ,EAIE,CACEX,MAAM,CAACe,IAAP,CAAYC,QAAZ,EADF,EAEEhB,MAAM,CAACiB,KAAP,CAAaD,QAAb,EAFF,EAGEhB,MAAM,CAACkB,KAHT,EAIElB,MAAM,CAACmB,KAJT,EAKEnB,MAAM,CAACoB,SAAP,CAAiBJ,QAAjB,EALF,EAMEhB,MAAM,CAACQ,EANT,CAJF;AAaD,WAdK,CADD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBP,OAAO,SAAea,GAAf,CAAmBrB,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AACLD,UAAAA,UAAU,CAACC,MAAD,CAAV;AACMqB,UAAAA,GAFD,GAEO;AACVb,YAAAA,EAAE,EAAER,MAAM,CAACQ,EADD;AAEVO,YAAAA,IAAI,EAAEf,MAAM,CAACe,IAFH;AAGVG,YAAAA,KAAK,EAAElB,MAAM,CAACkB,KAHJ;AAIVD,YAAAA,KAAK,EAAEjB,MAAM,CAACiB,KAJJ;AAKVE,YAAAA,KAAK,EAAE;AALG,WAFP;;AAAA,gBASDnB,MAAM,CAACQ,EAAP,KAAc,IATb;AAAA;AAAA;AAAA;;AAAA,4CAUI,KAVJ;;AAAA;AAYLV,UAAAA,EAAE,CAACW,WAAH,CAAe,UAACC,EAAD,EAAQ;AACrBA,YAAAA,EAAE,CAACC,UAAH,CACE,8EADF,EAEE,CACEX,MAAM,CAACQ,EADT,EAEER,MAAM,CAACe,IAAP,CAAYC,QAAZ,EAFF,EAGEhB,MAAM,CAACiB,KAAP,CAAaD,QAAb,EAHF,EAIEhB,MAAM,CAACkB,KAJT,EAKElB,MAAM,CAACmB,KALT,EAMEnB,MAAM,CAACoB,SAAP,CAAiBJ,QAAjB,EANF,CAFF;AAWD,WAZD;;AAZK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { Product } from \"../interfaces/product\";\nimport { BancoSql } from \"../core/db\";\n\nconst state: any = {\n  products: [],\n};\nconst db = BancoSql();\n\nasync function validation(params: Product) {\n  const result = list();\n  console.log(params);\n  result.then((result: Product[]) => {\n    // console.log(result.id == params.id),\n    result.forEach((e) => console.log(e)), console.log(params.id);\n  });\n\n  list();\n}\n\nexport async function list() {\n  await db.transaction((tx) => {\n    tx.executeSql(\n      \"select * from car\",\n      [],\n      (_, { rows }) => (state.products = rows)\n    );\n  });\n  return state.products;\n}\nexport async function update(params: Product) {\n  await db.transaction((tx) => {\n    tx.executeSql(\n      \"update car set name = ?, \" +\n        \" name = ?, image = ?, price = ?,stock = ?,createdAt = ?\" +\n        \" where id = ?;\",\n      [\n        params.name.toString(),\n        params.image.toString(),\n        params.price,\n        params.stock,\n        params.createdAt.toString(),\n        params.id,\n      ]\n    );\n  });\n}\n\nexport async function add(params: Product) {\n  validation(params);\n  const add = {\n    id: params.id,\n    name: params.name,\n    price: params.price,\n    image: params.image,\n    stock: 1,\n  };\n  if (params.id === null) {\n    return false;\n  }\n  db.transaction((tx) => {\n    tx.executeSql(\n      \"insert into car (id, name,image, price,stock,createdAt) values (?,?,?,?,?,?)\",\n      [\n        params.id,\n        params.name.toString(),\n        params.image.toString(),\n        params.price,\n        params.stock,\n        params.createdAt.toString(),\n      ]\n    );\n  });\n}\n"]},"metadata":{},"sourceType":"module"}