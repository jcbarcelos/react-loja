{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { BancoSql } from \"../core/db\";\nimport { toast, Zoom } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\nimport { useState } from \"react\";\nvar state = {\n  products: [],\n  status: \"\",\n  items: []\n};\nvar db = BancoSql();\n\nfunction validation(params) {\n  return _regeneratorRuntime.async(function validation$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(list().then(function (result) {\n            for (var index = 0; index < result.length; index++) {\n              if (result[index].id == params.id) {\n                state.status = \"true\";\n                error(\"Produto ja esta no carinho\");\n                return;\n              }\n            }\n          }));\n\n        case 2:\n          return _context.abrupt(\"return\", state.status);\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport function list() {\n  var _useState, _useState2, product, setProducts;\n\n  return _regeneratorRuntime.async(function list$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _useState = useState(), _useState2 = _slicedToArray(_useState, 2), product = _useState2[0], setProducts = _useState2[1];\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(db.transaction(function (tx) {\n            tx.executeSql(\"select * from car; \", [], function (_, _ref) {\n              var rows = _ref.rows;\n              return setProducts(rows);\n            });\n          }));\n\n        case 3:\n          console.log(product);\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(state.items);\n\n        case 6:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function update(params) {\n  return _regeneratorRuntime.async(function update$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(db.transaction(function (tx) {\n            tx.executeSql(\"update car set name = ?, \" + \" name = ?, image = ?, price = ?,stock = ?,createdAt = ?\" + \" where id = ?;\", [params.name.toString(), params.image.toString(), params.price, params.stock, params.createdAt.toString(), params.id]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function add(params) {\n  var validate, add;\n  return _regeneratorRuntime.async(function add$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regeneratorRuntime.awrap(validation(params));\n\n        case 2:\n          validate = _context4.sent;\n\n          if (!(validate == \"true\")) {\n            _context4.next = 5;\n            break;\n          }\n\n          return _context4.abrupt(\"return\");\n\n        case 5:\n          add = {\n            id: params.id,\n            name: params.name,\n            price: params.price,\n            image: params.image,\n            stock: 1\n          };\n\n          if (!(params.id === null)) {\n            _context4.next = 8;\n            break;\n          }\n\n          return _context4.abrupt(\"return\", false);\n\n        case 8:\n          _context4.next = 10;\n          return _regeneratorRuntime.awrap(db.transaction(function (tx) {\n            tx.executeSql(\"insert into car (id, name,image, price,stock,createdAt) values (?,?,?,?,?,?)\", [params.id, params.name.toString(), params.image.toString(), params.price, params.stock, params.createdAt.toString()]);\n          }));\n\n        case 10:\n          _context4.next = 12;\n          return _regeneratorRuntime.awrap(success(\"Salvo com sucesso!\"));\n\n        case 12:\n          _context4.next = 14;\n          return _regeneratorRuntime.awrap(list());\n\n        case 14:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction error(msg) {\n  toast.error(\"\" + msg, {\n    theme: \"dark\",\n    transition: Zoom\n  });\n}\n\nfunction success(msg) {\n  toast.success(\"'\" + msg + \"'\", {\n    theme: \"dark\"\n  });\n}","map":{"version":3,"sources":["/home/jc/projetos/cursos/node/reactnative/loja/src/service/index.tsx"],"names":["BancoSql","toast","Zoom","useState","state","products","status","items","db","validation","params","list","then","result","index","length","id","error","product","setProducts","transaction","tx","executeSql","_","rows","console","log","update","name","toString","image","price","stock","createdAt","add","validate","success","msg","theme","transition"],"mappings":"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","sourcesContent":["import { Product } from \"../interfaces/product\";\nimport { BancoSql } from \"../core/db\";\nimport { Slide, toast, Zoom } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\nimport React, { useEffect, useState } from \"react\";\n\nconst state: any = {\n  products: [],\n  status: \"\",\n  items: [],\n};\nconst db = BancoSql();\n\nasync function validation(params: Product) {\n  //   await db.transaction((tx) => {\n  //     tx.executeSql(\"delete from car\");\n  //   });\n\n  await list().then((result: any) => {\n    for (let index = 0; index < result.length; index++) {\n      if (result[index].id == params.id) {\n        state.status = \"true\";\n        error(\"Produto ja esta no carinho\");\n        return;\n      }\n    }\n  });\n  return state.status;\n}\n\nexport async function list() {\n  const [product, setProducts] = useState<any>();\n\n  await db.transaction((tx) => {\n    tx.executeSql(`select * from car; `, [], (_, { rows }) =>\n      setProducts(rows)\n    );\n  });\n  console.log(product);\n\n  return await state.items;\n}\nexport async function update(params: Product) {\n  await db.transaction((tx) => {\n    tx.executeSql(\n      \"update car set name = ?, \" +\n        \" name = ?, image = ?, price = ?,stock = ?,createdAt = ?\" +\n        \" where id = ?;\",\n      [\n        params.name.toString(),\n        params.image.toString(),\n        params.price,\n        params.stock,\n        params.createdAt.toString(),\n        params.id,\n      ]\n    );\n  });\n}\n\nexport async function add(params: Product) {\n  let validate: any = await validation(params);\n  if (validate == \"true\") return;\n  const add = {\n    id: params.id,\n    name: params.name,\n    price: params.price,\n    image: params.image,\n    stock: 1,\n  };\n  if (params.id === null) {\n    return false;\n  }\n  await db.transaction((tx) => {\n    tx.executeSql(\n      \"insert into car (id, name,image, price,stock,createdAt) values (?,?,?,?,?,?)\",\n      [\n        params.id,\n        params.name.toString(),\n        params.image.toString(),\n        params.price,\n        params.stock,\n        params.createdAt.toString(),\n      ]\n    );\n  });\n\n  await success(\"Salvo com sucesso!\");\n  await list();\n}\nfunction error(msg: String) {\n  toast.error(`${msg}`, {\n    theme: \"dark\",\n    transition: Zoom,\n  });\n}\nfunction success(msg: String) {\n  toast.success(`'${msg}'`, {\n    theme: \"dark\",\n  });\n}\n"]},"metadata":{},"sourceType":"module"}