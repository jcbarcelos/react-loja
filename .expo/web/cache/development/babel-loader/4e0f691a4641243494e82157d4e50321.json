{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { BancoSql } from \"../core/db\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nvar state = {\n  products: [],\n  status: \"\",\n  items: []\n};\nvar db = BancoSql();\n\nfunction validation(params) {\n  var result, index;\n  return _regeneratorRuntime.async(function validation$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(list());\n\n        case 2:\n          result = _context.sent;\n          index = 0;\n\n        case 4:\n          if (!(index < result.length)) {\n            _context.next = 12;\n            break;\n          }\n\n          if (!(result[index].id == params.id)) {\n            _context.next = 9;\n            break;\n          }\n\n          state.status = \"true\";\n          error(\"Produto ja esta no carinho\");\n          return _context.abrupt(\"return\");\n\n        case 9:\n          index++;\n          _context.next = 4;\n          break;\n\n        case 12:\n          return _context.abrupt(\"return\", \"false\");\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport function list() {\n  return _regeneratorRuntime.async(function list$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"car\"));\n\n        case 3:\n          state.products = _context2.sent;\n          return _context2.abrupt(\"return\", JSON.parse(state.products));\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n\n        case 9:\n          console.log(state.products);\n          return _context2.abrupt(\"return\", state.products);\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n}\nexport function update(params) {\n  return _regeneratorRuntime.async(function update$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(db.transaction(function (tx) {\n            tx.executeSql(\"update car set name = ?, \" + \" name = ?, image = ?, price = ?,stock = ?,createdAt = ?\" + \" where id = ?;\", [params.name.toString(), params.image.toString(), params.price, params.stock, params.createdAt.toString(), params.id]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function add(params) {\n  var validate, add, res, jsonValue;\n  return _regeneratorRuntime.async(function add$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regeneratorRuntime.awrap(validation(params));\n\n        case 2:\n          validate = _context4.sent;\n          console.log(validate);\n          add = {\n            id: params.id,\n            name: params.name,\n            price: params.price,\n            image: params.image,\n            stock: 1\n          };\n          res = state.products;\n          res.push(add);\n          console.log(res);\n\n          if (!(params.id === null)) {\n            _context4.next = 10;\n            break;\n          }\n\n          return _context4.abrupt(\"return\", false);\n\n        case 10:\n          _context4.prev = 10;\n          jsonValue = JSON.stringify(res);\n          _context4.next = 14;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"car\", jsonValue));\n\n        case 14:\n          _context4.next = 19;\n          break;\n\n        case 16:\n          _context4.prev = 16;\n          _context4.t0 = _context4[\"catch\"](10);\n          console.log(_context4.t0);\n\n        case 19:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[10, 16]], Promise);\n}\n\nfunction error(msg) {}\n\nfunction success(msg) {}","map":{"version":3,"sources":["/home/jc/projetos/cursos/node/reactnative/loja/src/service/index.tsx"],"names":["BancoSql","AsyncStorage","state","products","status","items","db","validation","params","list","result","index","length","id","error","getItem","JSON","parse","console","log","update","transaction","tx","executeSql","name","toString","image","price","stock","createdAt","add","validate","res","push","jsonValue","stringify","setItem","msg","success"],"mappings":"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","sourcesContent":["import { Product } from \"../interfaces/product\";\nimport { BancoSql } from \"../core/db\";\nimport React, { useEffect, useState } from \"react\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nconst state: any = {\n  products: [],\n  status: \"\",\n  items: [],\n};\nconst db = BancoSql();\n\nasync function validation(params: Product) {\n  const result = await list();\n  for (let index = 0; index < result.length; index++) {\n    if (result[index].id == params.id) {\n      state.status = \"true\";\n      error(\"Produto ja esta no carinho\");\n      return;\n    }\n  }\n  return \"false\";\n}\n\nexport async function list() {\n  try {\n    state.products = await AsyncStorage.getItem(\"car\");\n    return JSON.parse(state.products);\n  } catch (e) {\n    // error reading value\n  }\n\n  console.log(state.products);\n  return state.products;\n}\nexport async function update(params: Product) {\n  await db.transaction((tx) => {\n    tx.executeSql(\n      \"update car set name = ?, \" +\n        \" name = ?, image = ?, price = ?,stock = ?,createdAt = ?\" +\n        \" where id = ?;\",\n      [\n        params.name.toString(),\n        params.image.toString(),\n        params.price,\n        params.stock,\n        params.createdAt.toString(),\n        params.id,\n      ]\n    );\n  });\n}\n\nexport async function add(params: Product) {\n  let validate: any = await validation(params);\n  console.log(validate);\n\n  // if (validate == \"true\") return;\n\n  let add = {\n    id: params.id,\n    name: params.name,\n    price: params.price,\n    image: params.image,\n    stock: 1,\n  };\n  let res = state.products;\n  res.push(add);\n  console.log(res);\n\n  if (params.id === null) {\n    return false;\n  }\n\n  try {\n    const jsonValue = JSON.stringify(res);\n    await AsyncStorage.setItem(\"car\", jsonValue);\n  } catch (e) {\n    console.log(e);\n  }\n}\nfunction error(msg: String) {}\nfunction success(msg: String) {}\n"]},"metadata":{},"sourceType":"module"}