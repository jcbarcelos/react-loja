{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { BancoSql } from \"../core/db\";\nimport { useState } from \"react\";\nvar state = {\n  products: [],\n  status: \"\"\n};\nvar db = BancoSql();\n\nfunction validation(params) {\n  var teste;\n  return _regeneratorRuntime.async(function validation$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          teste = [];\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(list().then(function (result) {\n            for (var index = 0; index < result.length; index++) {\n              var _useState = useState(Boolean),\n                  _useState2 = _slicedToArray(_useState, 2),\n                  states = _useState2[0],\n                  setstate = _useState2[1];\n\n              var element = result[index];\n              console.log(\"Result.id \", result[index].id);\n              console.log(\"params.id \", params.id);\n              console.log(\"status === \", result[index].id == params.id);\n\n              if (result[index].id === params.id) {\n                console.log(state.status);\n                setstate(true);\n              }\n\n              return states;\n              console.log(states);\n            }\n          }));\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport function list() {\n  return _regeneratorRuntime.async(function list$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(db.transaction(function (tx) {\n            tx.executeSql(\"select * from car\", [], function (_, _ref) {\n              var rows = _ref.rows;\n              return state.products = rows;\n            });\n          }));\n\n        case 2:\n          console.log(state.products);\n          return _context2.abrupt(\"return\", state.products);\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function update(params) {\n  return _regeneratorRuntime.async(function update$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(db.transaction(function (tx) {\n            tx.executeSql(\"update car set name = ?, \" + \" name = ?, image = ?, price = ?,stock = ?,createdAt = ?\" + \" where id = ?;\", [params.name.toString(), params.image.toString(), params.price, params.stock, params.createdAt.toString(), params.id]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function add(params) {\n  var validate, add;\n  return _regeneratorRuntime.async(function add$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regeneratorRuntime.awrap(validation(params));\n\n        case 2:\n          validate = _context4.sent;\n          console.log(validate);\n\n          if (!(validate == \"true\")) {\n            _context4.next = 6;\n            break;\n          }\n\n          return _context4.abrupt(\"return\", console.log(\"Produto ja esta no carinho\"));\n\n        case 6:\n          add = {\n            id: params.id,\n            name: params.name,\n            price: params.price,\n            image: params.image,\n            stock: 1\n          };\n\n          if (!(params.id === null)) {\n            _context4.next = 9;\n            break;\n          }\n\n          return _context4.abrupt(\"return\", false);\n\n        case 9:\n          _context4.next = 11;\n          return _regeneratorRuntime.awrap(db.transaction(function (tx) {\n            tx.executeSql(\"insert into car (id, name,image, price,stock,createdAt) values (?,?,?,?,?,?)\", [params.id, params.name.toString(), params.image.toString(), params.price, params.stock, params.createdAt.toString()]);\n          }));\n\n        case 11:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["/home/jc/projetos/cursos/node/reactnative/loja/src/service/index.tsx"],"names":["BancoSql","useState","state","products","status","db","validation","params","teste","list","then","result","index","length","Boolean","states","setstate","element","console","log","id","transaction","tx","executeSql","_","rows","update","name","toString","image","price","stock","createdAt","add","validate"],"mappings":"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","sourcesContent":["import { Product } from \"../interfaces/product\";\nimport { BancoSql } from \"../core/db\";\nimport React, { useState } from \"react\";\n\nconst state: any = {\n  products: [],\n  status: \"\",\n};\nconst db = BancoSql();\n\nasync function validation(params: Product) {\n  let teste: any = [];\n  //   await db.transaction((tx) => {\n  //     tx.executeSql(\"delete from car\");\n  //   });\n\n  await list().then((result: any) => {\n    for (let index = 0; index < result.length; index++) {\n      const [states, setstate] = useState(Boolean);\n      const element = result[index];\n      console.log(\"Result.id \", result[index].id);\n      console.log(\"params.id \", params.id);\n      console.log(\"status === \", result[index].id == params.id);\n      if (result[index].id === params.id) {\n        console.log(state.status);\n\n        setstate(true);\n        //alert(\"No\");\n      }\n      return states;\n      console.log(states);\n    }\n  });\n}\n\nexport async function list() {\n  await db.transaction((tx) => {\n    tx.executeSql(\n      \"select * from car\",\n      [],\n      (_, { rows }) => (state.products = rows)\n    );\n  });\n  console.log(state.products);\n\n  return state.products;\n}\nexport async function update(params: Product) {\n  await db.transaction((tx) => {\n    tx.executeSql(\n      \"update car set name = ?, \" +\n        \" name = ?, image = ?, price = ?,stock = ?,createdAt = ?\" +\n        \" where id = ?;\",\n      [\n        params.name.toString(),\n        params.image.toString(),\n        params.price,\n        params.stock,\n        params.createdAt.toString(),\n        params.id,\n      ]\n    );\n  });\n}\n\nexport async function add(params: Product) {\n  let validate: any = await validation(params);\n  console.log(validate);\n  if (validate == \"true\") {\n    return console.log(\"Produto ja esta no carinho\");\n  }\n  const add = {\n    id: params.id,\n    name: params.name,\n    price: params.price,\n    image: params.image,\n    stock: 1,\n  };\n  if (params.id === null) {\n    return false;\n  }\n  await db.transaction((tx) => {\n    tx.executeSql(\n      \"insert into car (id, name,image, price,stock,createdAt) values (?,?,?,?,?,?)\",\n      [\n        params.id,\n        params.name.toString(),\n        params.image.toString(),\n        params.price,\n        params.stock,\n        params.createdAt.toString(),\n      ]\n    );\n  });\n}\n"]},"metadata":{},"sourceType":"module"}