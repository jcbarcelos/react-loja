{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { BancoSql } from \"../core/db\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nvar state = {\n  products: [],\n  status: \"\",\n  items: []\n};\nvar db = BancoSql();\n\nfunction validation(params) {\n  return _regeneratorRuntime.async(function validation$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", state.status);\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport function list() {\n  return _regeneratorRuntime.async(function list$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"car\"));\n\n        case 3:\n          state.products = _context2.sent;\n          return _context2.abrupt(\"return\", JSON.parse(state.products));\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n\n        case 9:\n          console.log(state.products);\n          return _context2.abrupt(\"return\", state.products);\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n}\nexport function update(params) {\n  return _regeneratorRuntime.async(function update$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(db.transaction(function (tx) {\n            tx.executeSql(\"update car set name = ?, \" + \" name = ?, image = ?, price = ?,stock = ?,createdAt = ?\" + \" where id = ?;\", [params.name.toString(), params.image.toString(), params.price, params.stock, params.createdAt.toString(), params.id]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function add(params) {\n  var validate, add, res, jsonValue;\n  return _regeneratorRuntime.async(function add$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regeneratorRuntime.awrap(validation(params));\n\n        case 2:\n          validate = _context4.sent;\n\n          if (!(validate == \"true\")) {\n            _context4.next = 5;\n            break;\n          }\n\n          return _context4.abrupt(\"return\");\n\n        case 5:\n          add = {\n            id: params.id,\n            name: params.name,\n            price: params.price,\n            image: params.image,\n            stock: 1\n          };\n\n          if (!(params.id === null)) {\n            _context4.next = 8;\n            break;\n          }\n\n          return _context4.abrupt(\"return\", false);\n\n        case 8:\n          _context4.prev = 8;\n          res = state.products.splice(0, 1, add);\n          console.log(res);\n          jsonValue = JSON.stringify(res);\n          _context4.next = 14;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"car\", jsonValue));\n\n        case 14:\n          _context4.next = 19;\n          break;\n\n        case 16:\n          _context4.prev = 16;\n          _context4.t0 = _context4[\"catch\"](8);\n          console.log(_context4.t0);\n\n        case 19:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[8, 16]], Promise);\n}\n\nfunction error(msg) {}\n\nfunction success(msg) {}","map":{"version":3,"sources":["/home/jc/projetos/cursos/node/reactnative/loja/src/service/index.tsx"],"names":["BancoSql","AsyncStorage","state","products","status","items","db","validation","params","list","getItem","JSON","parse","console","log","update","transaction","tx","executeSql","name","toString","image","price","stock","createdAt","id","add","validate","res","splice","jsonValue","stringify","setItem","error","msg","success"],"mappings":";AACA,SAASA,QAAT;AAEA,OAAOC,YAAP,MAAyB,2CAAzB;AAEA,IAAMC,KAAU,GAAG;AACjBC,EAAAA,QAAQ,EAAE,EADO;AAEjBC,EAAAA,MAAM,EAAE,EAFS;AAGjBC,EAAAA,KAAK,EAAE;AAHU,CAAnB;AAKA,IAAMC,EAAE,GAAGN,QAAQ,EAAnB;;AAEA,SAAeO,UAAf,CAA0BC,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA,2CAcSN,KAAK,CAACE,MAdf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,OAAO,SAAeK,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEoBR,YAAY,CAACS,OAAb,CAAqB,KAArB,CAFpB;;AAAA;AAEHR,UAAAA,KAAK,CAACC,QAFH;AAAA,4CAGIQ,IAAI,CAACC,KAAL,CAAWV,KAAK,CAACC,QAAjB,CAHJ;;AAAA;AAAA;AAAA;;AAAA;AAQLU,UAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAK,CAACC,QAAlB;AARK,4CASED,KAAK,CAACC,QATR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWP,OAAO,SAAeY,MAAf,CAAsBP,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACCF,EAAE,CAACU,WAAH,CAAe,UAACC,EAAD,EAAQ;AAC3BA,YAAAA,EAAE,CAACC,UAAH,CACE,8BACE,yDADF,GAEE,gBAHJ,EAIE,CACEV,MAAM,CAACW,IAAP,CAAYC,QAAZ,EADF,EAEEZ,MAAM,CAACa,KAAP,CAAaD,QAAb,EAFF,EAGEZ,MAAM,CAACc,KAHT,EAIEd,MAAM,CAACe,KAJT,EAKEf,MAAM,CAACgB,SAAP,CAAiBJ,QAAjB,EALF,EAMEZ,MAAM,CAACiB,EANT,CAJF;AAaD,WAdK,CADD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBP,OAAO,SAAeC,GAAf,CAAmBlB,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACqBD,UAAU,CAACC,MAAD,CAD/B;;AAAA;AACDmB,UAAAA,QADC;;AAAA,gBAEDA,QAAQ,IAAI,MAFX;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAGCD,UAAAA,GAHD,GAGO;AACVD,YAAAA,EAAE,EAAEjB,MAAM,CAACiB,EADD;AAEVN,YAAAA,IAAI,EAAEX,MAAM,CAACW,IAFH;AAGVG,YAAAA,KAAK,EAAEd,MAAM,CAACc,KAHJ;AAIVD,YAAAA,KAAK,EAAEb,MAAM,CAACa,KAJJ;AAKVE,YAAAA,KAAK,EAAE;AALG,WAHP;;AAAA,gBAUDf,MAAM,CAACiB,EAAP,KAAc,IAVb;AAAA;AAAA;AAAA;;AAAA,4CAWI,KAXJ;;AAAA;AAAA;AAeGG,UAAAA,GAfH,GAeS1B,KAAK,CAACC,QAAN,CAAe0B,MAAf,CAAsB,CAAtB,EAAyB,CAAzB,EAA4BH,GAA5B,CAfT;AAgBHb,UAAAA,OAAO,CAACC,GAAR,CAAYc,GAAZ;AACME,UAAAA,SAjBH,GAiBenB,IAAI,CAACoB,SAAL,CAAeH,GAAf,CAjBf;AAAA;AAAA,2CAkBG3B,YAAY,CAAC+B,OAAb,CAAqB,KAArB,EAA4BF,SAA5B,CAlBH;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAoBHjB,UAAAA,OAAO,CAACC,GAAR;;AApBG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAuBP,SAASmB,KAAT,CAAeC,GAAf,EAA4B,CAAE;;AAC9B,SAASC,OAAT,CAAiBD,GAAjB,EAA8B,CAAE","sourcesContent":["import { Product } from \"../interfaces/product\";\nimport { BancoSql } from \"../core/db\";\nimport React, { useEffect, useState } from \"react\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nconst state: any = {\n  products: [],\n  status: \"\",\n  items: [],\n};\nconst db = BancoSql();\n\nasync function validation(params: Product) {\n  //   await db.transaction((tx) => {\n  //     tx.executeSql(\"delete from car\");\n  //   });\n\n  // await list().then((result: any) => {\n  //   for (let index = 0; index < result.length; index++) {\n  //     if (result[index].id == params.id) {\n  //       state.status = \"true\";\n  //       error(\"Produto ja esta no carinho\");\n  //       return;\n  //     }\n  //   }\n  // });\n  return state.status;\n}\n\nexport async function list() {\n  try {\n    state.products = await AsyncStorage.getItem(\"car\");\n    return JSON.parse(state.products);\n  } catch (e) {\n    // error reading value\n  }\n\n  console.log(state.products);\n  return state.products;\n}\nexport async function update(params: Product) {\n  await db.transaction((tx) => {\n    tx.executeSql(\n      \"update car set name = ?, \" +\n        \" name = ?, image = ?, price = ?,stock = ?,createdAt = ?\" +\n        \" where id = ?;\",\n      [\n        params.name.toString(),\n        params.image.toString(),\n        params.price,\n        params.stock,\n        params.createdAt.toString(),\n        params.id,\n      ]\n    );\n  });\n}\n\nexport async function add(params: Product) {\n  let validate: any = await validation(params);\n  if (validate == \"true\") return;\n  const add = {\n    id: params.id,\n    name: params.name,\n    price: params.price,\n    image: params.image,\n    stock: 1,\n  };\n  if (params.id === null) {\n    return false;\n  }\n\n  try {\n    const res = state.products.splice(0, 1, add);\n    console.log(res);\n    const jsonValue = JSON.stringify(res);\n    await AsyncStorage.setItem(\"car\", jsonValue);\n  } catch (e) {\n    console.log(e);\n  }\n}\nfunction error(msg: String) {}\nfunction success(msg: String) {}\n"]},"metadata":{},"sourceType":"module"}