{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nvar state = {\n  products: []\n};\nexport function save(params) {\n  var pord, add;\n  return _regeneratorRuntime.async(function save$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          pord = [state.products];\n          validation(params, state.products);\n          add = {\n            id: params.id,\n            name: params.name,\n            price: params.price,\n            image: params.image,\n            stock: 1\n          };\n          pord.splice(0, 0, add);\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"car\", JSON.stringify(pord)));\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function load() {\n  var result;\n  return _regeneratorRuntime.async(function load$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"car\"));\n\n        case 2:\n          result = _context2.sent;\n          state.products = JSON.parse(result);\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction validation(params, prod) {\n  var result, valor;\n  return _regeneratorRuntime.async(function validation$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"car\"));\n\n        case 2:\n          result = _context3.sent;\n          valor = JSON.parse(result);\n          console.log(params);\n          console.log(valor);\n          valor.forEach(function (item) {\n            if (params.id === item.id) {\n              console.log(\"Produto já existe\");\n            }\n          });\n\n        case 7:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["/home/jc/projetos/cursos/node/reactnative/loja/src/service/index.tsx"],"names":["AsyncStorage","state","products","save","params","pord","validation","add","id","name","price","image","stock","splice","setItem","JSON","stringify","load","getItem","result","parse","prod","valor","console","log","forEach","item"],"mappings":";AAAA,OAAOA,YAAP,MAAyB,2CAAzB;AAGA,IAAMC,KAAK,GAAG;AACZC,EAAAA,QAAQ,EAAE;AADE,CAAd;AAIA,OAAO,SAAeC,IAAf,CAAoBC,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,UAAAA,IADD,GACa,CAACJ,KAAK,CAACC,QAAP,CADb;AAELI,UAAAA,UAAU,CAACF,MAAD,EAASH,KAAK,CAACC,QAAf,CAAV;AACMK,UAAAA,GAHD,GAGO;AACVC,YAAAA,EAAE,EAAEJ,MAAM,CAACI,EADD;AAEVC,YAAAA,IAAI,EAAEL,MAAM,CAACK,IAFH;AAGVC,YAAAA,KAAK,EAAEN,MAAM,CAACM,KAHJ;AAIVC,YAAAA,KAAK,EAAEP,MAAM,CAACO,KAJJ;AAKVC,YAAAA,KAAK,EAAE;AALG,WAHP;AAULP,UAAAA,IAAI,CAACQ,MAAL,CAAY,CAAZ,EAAe,CAAf,EAAkBN,GAAlB;AAVK;AAAA,2CAWCP,YAAY,CAACc,OAAb,CAAqB,KAArB,EAA4BC,IAAI,CAACC,SAAL,CAAeX,IAAf,CAA5B,CAXD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcP,OAAO,SAAeY,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACqBjB,YAAY,CAACkB,OAAb,CAAqB,KAArB,CADrB;;AAAA;AACCC,UAAAA,MADD;AAELlB,UAAAA,KAAK,CAACC,QAAN,GAAiBa,IAAI,CAACK,KAAL,CAAWD,MAAX,CAAjB;;AAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKP,SAAeb,UAAf,CAA0BF,MAA1B,EAAuCiB,IAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAC4BrB,YAAY,CAACkB,OAAb,CAAqB,KAArB,CAD5B;;AAAA;AACQC,UAAAA,MADR;AAEQG,UAAAA,KAFR,GAEgBP,IAAI,CAACK,KAAL,CAAWD,MAAX,CAFhB;AAGEI,UAAAA,OAAO,CAACC,GAAR,CAAYpB,MAAZ;AACAmB,UAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAA,UAAAA,KAAK,CAACG,OAAN,CAAc,UAACC,IAAD,EAAe;AAC3B,gBAAItB,MAAM,CAACI,EAAP,KAAckB,IAAI,CAAClB,EAAvB,EAA2B;AACzBe,cAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AAGD;AACF,WAND;;AALF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { Product } from \"../interfaces/product\";\n\nconst state = {\n  products: [],\n};\n\nexport async function save(params: Product) {\n  const pord: any = [state.products];\n  validation(params, state.products);\n  const add = {\n    id: params.id,\n    name: params.name,\n    price: params.price,\n    image: params.image,\n    stock: 1,\n  };\n  pord.splice(0, 0, add);\n  await AsyncStorage.setItem(\"car\", JSON.stringify(pord));\n}\n\nexport async function load() {\n  const result: any = await AsyncStorage.getItem(\"car\");\n  state.products = JSON.parse(result);\n}\n\nasync function validation(params: any, prod: any) {\n  const result: any = await AsyncStorage.getItem(\"car\");\n  const valor = JSON.parse(result);\n  console.log(params);\n  console.log(valor);\n  valor.forEach((item: any) => {\n    if (params.id === item.id) {\n      console.log(\"Produto já existe\");\n\n      //alert(\"Produto já existe\");\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}