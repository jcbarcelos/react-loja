{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { BancoSql } from \"../core/db\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nvar state = {\n  products: [],\n  status: \"\",\n  items: []\n};\nvar db = BancoSql();\n\nfunction validation(params) {\n  var result, index;\n  return _regeneratorRuntime.async(function validation$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(list());\n\n        case 2:\n          result = _context.sent;\n          index = 0;\n\n        case 4:\n          if (!(index < (result == null ? void 0 : result.length))) {\n            _context.next = 17;\n            break;\n          }\n\n          if (!(result[index].id == params.id)) {\n            _context.next = 11;\n            break;\n          }\n\n          state.status = \"true\";\n          error(\"Produto ja esta no carinho\");\n          return _context.abrupt(\"return\", state.status);\n\n        case 11:\n          state.status = \"false\";\n          success(\"Produto add no carinho\");\n          return _context.abrupt(\"return\", state.status);\n\n        case 14:\n          index++;\n          _context.next = 4;\n          break;\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport function list() {\n  return _regeneratorRuntime.async(function list$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"car\"));\n\n        case 3:\n          state.products = _context2.sent;\n          return _context2.abrupt(\"return\", JSON.parse(state.products));\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n\n        case 9:\n          return _context2.abrupt(\"return\", state.products);\n\n        case 10:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n}\nexport function update(params) {\n  return _regeneratorRuntime.async(function update$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(db.transaction(function (tx) {\n            tx.executeSql(\"update car set name = ?, \" + \" name = ?, image = ?, price = ?,stock = ?,createdAt = ?\" + \" where id = ?;\", [params.name.toString(), params.image.toString(), params.price, params.stock, params.createdAt.toString(), params.id]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function add(params) {\n  var validate, add, res, jsonValue;\n  return _regeneratorRuntime.async(function add$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regeneratorRuntime.awrap(validation(params));\n\n        case 2:\n          validate = _context4.sent;\n\n          if (!(validate == \"true\")) {\n            _context4.next = 5;\n            break;\n          }\n\n          return _context4.abrupt(\"return\");\n\n        case 5:\n          add = {\n            id: params.id,\n            name: params.name,\n            price: params.price,\n            image: params.image,\n            stock: 1\n          };\n          res = [];\n          res.push(state.products);\n\n          try {\n            res.splice(0, 1, add);\n            console.log(res);\n          } catch (error) {\n            console.log(error);\n          }\n\n          console.log(res);\n\n          if (!(params.id === null)) {\n            _context4.next = 12;\n            break;\n          }\n\n          return _context4.abrupt(\"return\", false);\n\n        case 12:\n          _context4.prev = 12;\n          jsonValue = JSON.stringify(res);\n          _context4.next = 16;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"car\", jsonValue));\n\n        case 16:\n          _context4.next = 21;\n          break;\n\n        case 18:\n          _context4.prev = 18;\n          _context4.t0 = _context4[\"catch\"](12);\n          console.log(_context4.t0);\n\n        case 21:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[12, 18]], Promise);\n}\n\nfunction error(msg) {\n  console.log(msg);\n}\n\nfunction success(msg) {}","map":{"version":3,"sources":["/home/jc/projetos/cursos/node/reactnative/loja/src/service/index.tsx"],"names":["BancoSql","AsyncStorage","state","products","status","items","db","validation","params","list","result","index","length","id","error","success","getItem","JSON","parse","update","transaction","tx","executeSql","name","toString","image","price","stock","createdAt","add","validate","res","push","splice","console","log","jsonValue","stringify","setItem","msg"],"mappings":"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","sourcesContent":["import { Product } from \"../interfaces/product\";\nimport { BancoSql } from \"../core/db\";\nimport React, { useEffect, useState } from \"react\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nconst state: any = {\n  products: [],\n  status: \"\",\n  items: [],\n};\nconst db = BancoSql();\n\nasync function validation(params: Product) {\n  const result = await list();\n\n  for (let index = 0; index < result?.length; index++) {\n    if (result[index].id == params.id) {\n      state.status = \"true\";\n      error(\"Produto ja esta no carinho\");\n      return state.status;\n    } else {\n      state.status = \"false\";\n      success(\"Produto add no carinho\");\n      return state.status;\n    }\n  }\n}\n\nexport async function list() {\n  try {\n    state.products = await AsyncStorage.getItem(\"car\");\n    return JSON.parse(state.products);\n  } catch (e) {\n    // error reading value\n  }\n\n  return state.products;\n}\nexport async function update(params: Product) {\n  await db.transaction((tx) => {\n    tx.executeSql(\n      \"update car set name = ?, \" +\n        \" name = ?, image = ?, price = ?,stock = ?,createdAt = ?\" +\n        \" where id = ?;\",\n      [\n        params.name.toString(),\n        params.image.toString(),\n        params.price,\n        params.stock,\n        params.createdAt.toString(),\n        params.id,\n      ]\n    );\n  });\n}\n\nexport async function add(params: Product) {\n  let validate: any = await validation(params);\n  if (validate == \"true\") return;\n\n  let add = {\n    id: params.id,\n    name: params.name,\n    price: params.price,\n    image: params.image,\n    stock: 1,\n  };\n  const res: any = [];\n  res.push(state.products);\n  try {\n    res.splice(0, 1, add);\n    console.log(res);\n  } catch (error) {\n    console.log(error);\n  }\n\n  console.log(res);\n\n  if (params.id === null) {\n    return false;\n  }\n\n  try {\n    const jsonValue = JSON.stringify(res);\n    await AsyncStorage.setItem(\"car\", jsonValue);\n  } catch (e) {\n    console.log(e);\n  }\n}\nfunction error(msg: String) {\n  console.log(msg);\n}\nfunction success(msg: String) {}\n"]},"metadata":{},"sourceType":"module"}