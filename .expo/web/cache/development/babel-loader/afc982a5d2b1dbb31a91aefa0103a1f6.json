{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { BancoSql } from \"../core/db\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nvar state = {\n  products: [],\n  status: \"\",\n  items: []\n};\nvar db = BancoSql();\n\nfunction validation(params) {\n  var result, index;\n  return _regeneratorRuntime.async(function validation$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(list());\n\n        case 2:\n          result = _context.sent;\n          index = 0;\n\n        case 4:\n          if (!(index < (result == null ? void 0 : result.length))) {\n            _context.next = 17;\n            break;\n          }\n\n          if (!(result[index].id == params.id)) {\n            _context.next = 11;\n            break;\n          }\n\n          state.status = \"true\";\n          error(\"Produto ja esta no carinho\");\n          return _context.abrupt(\"return\", state.status);\n\n        case 11:\n          state.status = \"false\";\n          success(\"Produto add no carinho\");\n          return _context.abrupt(\"return\", state.status);\n\n        case 14:\n          index++;\n          _context.next = 4;\n          break;\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport function list() {\n  return _regeneratorRuntime.async(function list$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"car\"));\n\n        case 3:\n          state.products = _context2.sent;\n          return _context2.abrupt(\"return\", JSON.parse(state.products));\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n\n        case 9:\n          return _context2.abrupt(\"return\", state.products);\n\n        case 10:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n}\nexport function update(params, stack, id) {\n  var add, result, fruits, itemArray, alteredArray;\n  return _regeneratorRuntime.async(function update$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          add = {\n            id: id,\n            name: params.children,\n            price: params.price,\n            image: params.image,\n            stock: parseInt(stack)\n          };\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(list());\n\n        case 3:\n          result = _context3.sent;\n          result == null ? fruits = [] : fruits = result;\n          console.log(result);\n          itemArray = [];\n          _context3.prev = 7;\n          _context3.next = 10;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"car\"));\n\n        case 10:\n          itemArray = _context3.sent;\n          JSON.parse(itemArray);\n          alteredArray = itemArray.filter(function (item) {\n            item.id !== id;\n          });\n          _context3.next = 15;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"car\", JSON.stringify(alteredArray)));\n\n        case 15:\n          _context3.next = 20;\n          break;\n\n        case 17:\n          _context3.prev = 17;\n          _context3.t0 = _context3[\"catch\"](7);\n          console.log(_context3.t0);\n\n        case 20:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[7, 17]], Promise);\n}\nexport function add(params) {\n  var validate, result, fruits, add, jsonValue;\n  return _regeneratorRuntime.async(function add$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regeneratorRuntime.awrap(validation(params));\n\n        case 2:\n          validate = _context4.sent;\n\n          if (!(validate == \"true\")) {\n            _context4.next = 5;\n            break;\n          }\n\n          return _context4.abrupt(\"return\");\n\n        case 5:\n          _context4.next = 7;\n          return _regeneratorRuntime.awrap(list());\n\n        case 7:\n          result = _context4.sent;\n          result == null ? fruits = [] : fruits = result;\n          add = {\n            id: params.id,\n            name: params.name,\n            price: params.price,\n            image: params.image,\n            stock: 1\n          };\n          fruits.splice(0, 0, add);\n\n          try {} catch (error) {\n            console.log(error);\n          }\n\n          if (!(params.id === null)) {\n            _context4.next = 14;\n            break;\n          }\n\n          return _context4.abrupt(\"return\", false);\n\n        case 14:\n          _context4.prev = 14;\n          jsonValue = JSON.stringify(fruits);\n          _context4.next = 18;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"car\", jsonValue));\n\n        case 18:\n          _context4.next = 23;\n          break;\n\n        case 20:\n          _context4.prev = 20;\n          _context4.t0 = _context4[\"catch\"](14);\n          console.log(_context4.t0);\n\n        case 23:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[14, 20]], Promise);\n}\n\nfunction error(msg) {\n  console.log(msg);\n}\n\nfunction success(msg) {}","map":{"version":3,"sources":["/home/jc/projetos/cursos/node/reactnative/loja/src/service/index.tsx"],"names":["BancoSql","AsyncStorage","state","products","status","items","db","validation","params","list","result","index","length","id","error","success","getItem","JSON","parse","update","stack","add","name","children","price","image","stock","parseInt","fruits","console","log","itemArray","alteredArray","filter","item","setItem","stringify","validate","splice","jsonValue","msg"],"mappings":"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","sourcesContent":["import { Product } from \"../interfaces/product\";\nimport { BancoSql } from \"../core/db\";\nimport React, { useEffect, useState } from \"react\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nconst state: any = {\n  products: [],\n  status: \"\",\n  items: [],\n};\nconst db = BancoSql();\n\nasync function validation(params: Product) {\n  const result = await list();\n\n  for (let index = 0; index < result?.length; index++) {\n    if (result[index].id == params.id) {\n      state.status = \"true\";\n      error(\"Produto ja esta no carinho\");\n      return state.status;\n    } else {\n      state.status = \"false\";\n      success(\"Produto add no carinho\");\n      return state.status;\n    }\n  }\n}\n\nexport async function list() {\n  try {\n    state.products = await AsyncStorage.getItem(\"car\");\n    return JSON.parse(state.products);\n  } catch (e) {\n    // error reading value\n  }\n\n  return state.products;\n}\nexport async function update(params: any, stack: string, id: number) {\n  let add = {\n    id: id,\n    name: params.children,\n    price: params.price,\n    image: params.image,\n    stock: parseInt(stack),\n  };\n  const result = await list();\n  let fruits: any;\n  result == null ? (fruits = []) : (fruits = result);\n  console.log(result);\n  let itemArray: any = [];\n  try {\n    itemArray = await AsyncStorage.getItem(\"car\");\n    JSON.parse(itemArray);\n    let alteredArray = itemArray.filter((item: any) => {\n      item.id !== id;\n    });\n    await AsyncStorage.setItem(\"car\", JSON.stringify(alteredArray));\n  } catch (error) {\n    console.log(error);\n  }\n\n  // for (let index = 0; index < result?.length; index++) {\n  //   console.log(result[index]);\n  //   console.log(result[index].id);\n\n  //   if (result[index].id == id) {\n  //     console.log(result[index]);\n\n  //     try {\n  //       fruits.removeItem(result[index]);\n  //       fruits.splice(0, 0, add);\n  //     } catch (error) {\n  //       console.log(error);\n  //     }\n\n  //     const jsonValue = JSON.stringify(fruits);\n  //     await AsyncStorage.setItem(\"car\", jsonValue);\n  //     return state.status;\n  //   } else {\n  //     state.status = \"false\";\n  //     success(\"Produto add no carinho\");\n  //     return state.status;\n  //   }\n  // }\n}\n\nexport async function add(params: Product) {\n  let validate: any = await validation(params);\n  if (validate == \"true\") return;\n  const result = await list();\n  let fruits: any;\n  result == null ? (fruits = []) : (fruits = result);\n  let add = {\n    id: params.id,\n    name: params.name,\n    price: params.price,\n    image: params.image,\n    stock: 1,\n  };\n  fruits.splice(0, 0, add);\n  try {\n  } catch (error) {\n    console.log(error);\n  }\n\n  if (params.id === null) {\n    return false;\n  }\n\n  try {\n    const jsonValue = JSON.stringify(fruits);\n    await AsyncStorage.setItem(\"car\", jsonValue);\n  } catch (e) {\n    console.log(e);\n  }\n}\nfunction error(msg: String) {\n  console.log(msg);\n}\nfunction success(msg: String) {}\n"]},"metadata":{},"sourceType":"module"}