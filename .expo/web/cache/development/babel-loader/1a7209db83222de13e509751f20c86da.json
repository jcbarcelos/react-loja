{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { BancoSql } from \"../core/db\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nvar state = {\n  products: [],\n  status: \"\",\n  items: []\n};\nvar db = BancoSql();\n\nfunction validation(params) {\n  return _regeneratorRuntime.async(function validation$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(list().then(function (result) {\n            for (var index = 0; index < result.length; index++) {\n              if (result[index].id == params.id) {\n                state.status = \"true\";\n                error(\"Produto ja esta no carinho\");\n                return;\n              }\n            }\n          }));\n\n        case 2:\n          return _context.abrupt(\"return\", state.status);\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport function list() {\n  return _regeneratorRuntime.async(function list$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"car\"));\n\n        case 3:\n          state.products = _context2.sent;\n          return _context2.abrupt(\"return\", state.products != null ? JSON.parse(state.products) : null);\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n\n        case 9:\n          console.log(state.products);\n\n        case 10:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n}\nexport function update(params) {\n  return _regeneratorRuntime.async(function update$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(db.transaction(function (tx) {\n            tx.executeSql(\"update car set name = ?, \" + \" name = ?, image = ?, price = ?,stock = ?,createdAt = ?\" + \" where id = ?;\", [params.name.toString(), params.image.toString(), params.price, params.stock, params.createdAt.toString(), params.id]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function add(params) {\n  var validate, add;\n  return _regeneratorRuntime.async(function add$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regeneratorRuntime.awrap(validation(params));\n\n        case 2:\n          validate = _context4.sent;\n\n          if (!(validate == \"true\")) {\n            _context4.next = 5;\n            break;\n          }\n\n          return _context4.abrupt(\"return\");\n\n        case 5:\n          add = {\n            id: params.id,\n            name: params.name,\n            price: params.price,\n            image: params.image,\n            stock: 1\n          };\n\n          if (!(params.id === null)) {\n            _context4.next = 8;\n            break;\n          }\n\n          return _context4.abrupt(\"return\", false);\n\n        case 8:\n          AsyncStorage.setItem(\"car\", JSON.stringify(add));\n\n        case 9:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction error(msg) {}\n\nfunction success(msg) {}","map":{"version":3,"sources":["/home/jc/projetos/cursos/node/reactnative/loja/src/service/index.tsx"],"names":["BancoSql","AsyncStorage","state","products","status","items","db","validation","params","list","then","result","index","length","id","error","getItem","JSON","parse","console","log","update","transaction","tx","executeSql","name","toString","image","price","stock","createdAt","add","validate","setItem","stringify","msg","success"],"mappings":"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","sourcesContent":["import { Product } from \"../interfaces/product\";\nimport { BancoSql } from \"../core/db\";\nimport React, { useEffect, useState } from \"react\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nconst state: any = {\n  products: [],\n  status: \"\",\n  items: [],\n};\nconst db = BancoSql();\n\nasync function validation(params: Product) {\n  //   await db.transaction((tx) => {\n  //     tx.executeSql(\"delete from car\");\n  //   });\n\n  await list().then((result: any) => {\n    for (let index = 0; index < result.length; index++) {\n      if (result[index].id == params.id) {\n        state.status = \"true\";\n        error(\"Produto ja esta no carinho\");\n        return;\n      }\n    }\n  });\n  return state.status;\n}\n\nexport async function list() {\n  //  state.products = [];\n  // await db.transaction((tx) => {\n  //   tx.executeSql(\"delete from car\");\n  // });\n\n  // await db.transaction((tx) => {\n  //   tx.executeSql(`select * from car; `, [], (_, { rows }) =>\n  //     state.products.splice(0, 0, rows)\n  //   );\n  // });\n  // console.log(state.products);\n\n  //\n\n  try {\n    state.products = await AsyncStorage.getItem(\"car\");\n    return state.products != null ? JSON.parse(state.products) : null;\n  } catch (e) {\n    // error reading value\n  }\n\n  console.log(state.products);\n}\nexport async function update(params: Product) {\n  await db.transaction((tx) => {\n    tx.executeSql(\n      \"update car set name = ?, \" +\n        \" name = ?, image = ?, price = ?,stock = ?,createdAt = ?\" +\n        \" where id = ?;\",\n      [\n        params.name.toString(),\n        params.image.toString(),\n        params.price,\n        params.stock,\n        params.createdAt.toString(),\n        params.id,\n      ]\n    );\n  });\n}\n\nexport async function add(params: Product) {\n  let validate: any = await validation(params);\n  if (validate == \"true\") return;\n  const add = {\n    id: params.id,\n    name: params.name,\n    price: params.price,\n    image: params.image,\n    stock: 1,\n  };\n  if (params.id === null) {\n    return false;\n  }\n  AsyncStorage.setItem(\"car\", JSON.stringify(add));\n  // await db.transaction((tx) => {\n  //   tx.executeSql(\n  //     \"insert into car (id, name,image, price,stock,createdAt) values (?,?,?,?,?,?)\",\n  //     [\n  //       params.id,\n  //       params.name.toString(),\n  //       params.image.toString(),\n  //       params.price,\n  //       params.stock,\n  //       params.createdAt.toString(),\n  //     ]\n  //   );\n  // });\n\n  //await success(\"Salvo com sucesso!\");\n  // await list();\n}\nfunction error(msg: String) {}\nfunction success(msg: String) {}\n"]},"metadata":{},"sourceType":"module"}